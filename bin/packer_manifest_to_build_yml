#!/usr/bin/env python

##
# Enrich existing build YAML artefact with details from Packer manifest.
#
#
import boto3
import os
import sys
import yaml
import json


def enrich_build_artefact(manifest_filename):
	manifest = load_json(manifest_filename)
	ami_id = None
	role = None
	artefact_filename = None
	tags = []

	for build in manifest['builds']:
		if build['packer_run_uuid'] == manifest['last_run_uuid']:
			ami_id = build['artifact_id'].split(':')[1]
			break

	# get AMI details
	ec2_client = boto3.client('ec2')
	images = ec2_client.describe_images(
		Owners=['self'],
		ImageIds=[ami_id]
	)
	tags = dict(zip(
		map(lambda x: x['Key'], images['Images'][0]['Tags']),
		map(lambda x: x['Value'], images['Images'][0]['Tags'])
	))
	role = tags['Role']

	artefact_filename = os.path.join(
		os.path.dirname(__file__),
		'..',
		'.artefacts',
		role + '.yml'
	)

	# update build artefact
	build_artefact = load_yaml(artefact_filename)
	if 'ami' not in build_artefact[role]:
		build_artefact[role]['ami'] = {}
	build_artefact[role]['ami']['id'] = str(ami_id)
	build_artefact[role]['ami']['name'] = tags['Name']
	build_artefact[role]['ami']['source_id'] = tags['BaseImageId']
	build_artefact[role]['ami']['version'] = tags['Version']
	save_yaml(artefact_filename, build_artefact)


def load_yaml(filename):
	yaml_hash = {}

	if os.path.exists(filename):
		with open(filename, 'r') as yml_file:
			try:
				yaml_hash = yaml.load(yml_file)
			except yaml.YAMLError as exc:
				print >> std.err, exc

	return yaml_hash


def save_yaml(filename, yaml_hash):
	if os.path.exists(filename):
		with open(filename, 'w+') as yml_file:
			try:
				yaml.dump(
					yaml_hash,
					yml_file,
					explicit_start=True,
					indent=2,
					default_flow_style=False
				)
			except:
				print >> std.err, sys.exc_info()[0]


def load_json(filename):
	json_hash = {}

	if os.path.exists(filename):
		with open(filename, 'r') as json_file:
			try:
				json_hash = json.load(json_file)
			except:
				print >> std.err, sys.exc_info()[0]

	return json_hash


if __name__ == '__main__':
	enrich_build_artefact(sys.argv[1])
